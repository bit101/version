#! /bin/bash

ver="v1.2.0"

# note: replace - with _ in tool name. e.g. pkg-config -> tools_pkg_config
# script will sanitize the input the same way

tools_alacritty=-V
tools_apt=-v
tools_arduino=--version
tools_audacious=-v
tools_autoconf=--version
tools_automake=--version
tools_awk=--version
tools_baobab=--version
tools_bash=--version
tools_bibtex=-version
tools_borg=-V
tools_brew=--version
tools_bundle=-v
tools_bundler=-v
tools_bzip2=--version
tools_calibre=--version
tools_cargo=--version
tools_carthage=version
tools_catfish=--version
tools_ccmake=--version
tools_cheese=--version
tools_chromium=--version
tools_clang=--version
tools_clang_format=--version
tools_clementine=--version
tools_clisp=--version
tools_cmake=--version
tools_code=--version
tools_coffee=-v
tools_conky=-v
tools_convert=--version
tools_crystal=-v
tools_ctags=--version
tools_curl=--version
tools_darcs=-v
tools_deluge=-V
tools_direnv=version
tools_docker=-v
tools_dosbox=--version
tools_dotnet=--version
tools_ed=-V
tools_egrep=--version
tools_electron=-v
tools_elixir=-v
tools_elm=--version
tools_engrampa=--version
tools_eog=--version
tools_exa=-v
tools_expac=--version
tools_ffmpeg=-version
tools_flac=-v
tools_flameshot=-v
tools_flatpak=--version
tools_firefox=-v
tools_fish=-v
tools_fossil=version
tools_fzf=--version
tools_gcc=--version
tools_gdb=--version
tools_gedit=--version
tools_gem=-v
tools_ghc=--version
tools_gimp=-version
tools_git=--version
tools_gitkraken=--version
tools_glade=--version
tools_gnome_boxes=--version
tools_go=version
tools_google_chrome_stable=--version
tools_gpodder=--version
tools_gradle=--version
tools_grep=-V
tools_guake=--version
tools_gzip=-V
tools_HandBrakeCLI=--version
tools_haxe=-version
tools_haxelib=version
tools_heroku=-v
tools_htop=-v
tools_inkscape=--version
tools_java=-version
tools_javac=-version
tools_julia=-v
tools_kodi=-v
tools_kotlin=-version
tools_ksh=--version
tools_lame=--version
tools_latex=-version
tools_latexmk=-version
tools_libreoffice=--version
tools_love=--version
tools_lua=-v
tools_magick=--version
tools_make=-v
tools_man=--version
tools_meld=--version
tools_mousepad=-v
tools_multipass=version
tools_mpv=--version
tools_nano=--version
tools_nautilus=--version
tools_ncdu=-v
tools_neofetch=--version
tools_ninja=--version
tools_node=-v
tools_nokogiri=-v
tools_nordvpn=-v
tools_npm=-v
tools_npx=-v
tools_nvim=-version
tools_pacman=--version
tools_pamac=--version
tools_pdflatex=-version
tools_perl=-v
tools_php=-v
tools_pip3=-V
tools_pip=-V
tools_pkg_config=--version
tools_python2=-V
tools_python3=-V
tools_python=-V
tools_rake=--version
tools_ranger=--version
tools_rbenv=-v
tools_restic=version
tools_rg=-V
tools_rofi=-v
tools_rome=--version
tools_rsync=--version
tools_rubocop=-v
tools_ruby=-v
tools_rustc=--version
tools_samba=--version
tools_sbatch=-V
tools_scalac=-version
tools_sccs=-V
tools_screen=-v
tools_sed=--version
tools_sidekiq=--version
tools_sinfo=-V
tools_slack=-v
tools_snap=--version
tools_snapcraft=version
tools_spotify=--version
tools_squeue=-V
tools_ssh=-V
tools_swift=-version
tools_syncthing=-version
tools_tcsh=--version
tools_tex=-version
tools_thefuck=-v
tools_thunar=--version
tools_tldr=-v
tools_tlmgr=version
tools_tmux=-V
tools_tsc=-v
tools_valgrind=--version
tools_version=-v
tools_vi=-version
tools_viewnior=--version
tools_vim=-version
tools_virt_manager=--version
tools_vlc=--version
tools_w3m=-version
tools_wine=--version
tools_wget=--version
tools_wmctrl=--version
tools_xelatex=-version
tools_xetex=-version
tools_xdotool=--version
tools_xrandr=-v
tools_xsel=--version
tools_yarn=--version
tools_yay=--version
tools_zathura=--version
tools_zenity=--version
tools_zsh=--version

function list_tools {
  sed -Ene 's/^tools_(.*)=(.*)/\1 \2/p' "$0"
}

function try_pacman {
  # is pacman installed?
  command -v pacman &> /dev/null 
  if [ $? -ne 0 ]
  then
    return
  fi

  # pacman is installed. let's try it
  echo "  checking pacman..."

  # this will return non-zero if nothing is found
  result="$(pacman -Qi $1 2>/dev/null | grep -Ee 'Version')"
  if [ $? -eq 0 ]
  then
    echo $result | sed -Ene "s/Version : (.*)/$1 version: \1/p"
    exit
  fi
}

function try_apt {
  # is apt installed?
  command -v apt &> /dev/null
  if [ $? -ne 0 ]
  then
    return
  fi

  # Java has an `apt` that may be installed (annotation processing tool)
  # Let's make sure we're not looking at that instead of the package manager `apt`
  # This will fail on Java's `apt`
  apt -v &> /dev/null
  if [ $? -ne 0 ]
  then
    return
  fi
  # apt is installed. let's try it
  echo "  checking apt..."

  # this returns 0 even if no results, so we have to count the matched lines
  lines=$(apt list $1 --installed 2>/dev/null | grep -Ece $1)
  if [ $lines -gt 0 ]
  then
    echo $(apt list $1 --installed 2>/dev/null | sed -Ene "s/^[^ ]* ([^ ]*) .*/$1 version: \1/p")
    exit
  fi
}

function try_dnf {
  # is dnf installed?
  command -v dnf &> /dev/null
  if [ $? -ne 0 ]
  then
    return
  fi

  # dnf is installed. let's try it
  echo "  checking dnf..."

  # this will return non-zero if nothing is found
  result="$(dnf list installed $1 2>/dev/null | grep -Ee $1)"
  if [ $? -eq 0 ]
  then
    echo $result | sed -Ene "s/[^ ]+ +([^ ]*).*/$1 version: \1/p"
    exit
  fi
}

function try_snap {
  # is snap installed?
  command -v snap &> /dev/null
  if [ $? -ne 0 ]
  then
    return
  fi

  # snap is installed. let's try it
  echo "  checking snap..."

  # this will return non-zero if nothing is found
  result="$(snap list $1 2>/dev/null | grep -Ee $1)"
  if [ $? -eq 0 ]
  then
    echo $result | sed -Ene "s/^$1 +([^ ]*).*/$1 version: \1/p"
    exit
  fi
}

function try_flatpak {
  # is flatpak installed?
  command -v flatpak &> /dev/null
  if [ $? -ne 0 ]
  then
    return
  fi

  # flatpak is installed. let's try it
  echo "  checking flatpak..."

  # `flatpak list` gives a list of all packages. format:
  # name<tab>id<tab>version<tab>branch<tab>installation
  # version is sometimes empty.
  # grep for what we are looking for, convert tabs to newlines.
  # version will be line 3
  result=$(flatpak list 2>/dev/null | grep -Ee "^$1" | tr '\t' '\n' | sed '3q;d')
  if [ ! -z $result ]
  then
    echo "$1 version: $result"
    exit
  fi
}

function try_npm {
  # is npm installed?
  command -v npm &> /dev/null
  if [ $? -ne 0 ]
  then
    return
  fi

  # npm is installed. let's try it
  echo "  checking npm..."

  # this will return non-zero if nothing is found
  result="$(npm list --global --depth 0 $1 2>/dev/null | grep -m 1 -Ee $1)"
  if [ $? -eq 0 ]
  then
    echo $result | sed -Ene "s/.*$1@(.*)/$1 version: \1/p"
    exit
  fi
}

function try_pip {
  # is pip installed?
  command -v pip &> /dev/null
  if [ $? -ne 0 ]
  then
    return
  fi

  # pip is installed. let's try it
  echo "  checking pip..."

  # this returns 0 even if no results, so we have to count the matched lines
  lines=$(pip list 2>/dev/null | grep -Ece ^$1)
  if [ $lines -gt 0 ]
  then
    result="$(pip list 2>/dev/null | grep -Ee ^$1)"
    echo $result | sed -Ene "s/^$1 +(.*)/$1 version: \1/p"
    exit
  fi
}

function try_brew {
  # is brew installed?
  command -v brew &> /dev/null
  if [ $? -ne 0 ]
  then
    return
  fi

  # pip is installed. let's try it
  echo "  checking brew..."

  # this returns nothing even if no results, so we have to count the matched lines
  lines=$(brew info $1 2>/dev/null | grep -Ece ^$1)
  if [ $lines -gt 0 ]
  then
    result="$(brew info $1 2>/dev/null | grep -Ee ^$1)"
    echo $result | sed -Ene "s/^$1: (.*)/$1 version: \1/p"
    exit
  fi
}

# User forgot to specify the program or a flag
if [ -z $1 ]
then
  echo "Usage: version <program>"
  exit 1
fi

# Display help
if [ $1 == -h ]
then
  echo "version displays the versions of programs you have installed."
  echo ""
  echo "Usage:"
  echo "  version <program>    display version of program"
  echo "                       (if known and installed)"
  echo "  version -h           display this help"
  echo "  version -l           display a list of known programs and their version flags"
  echo "  version -c           display count of known programs"
  echo "  version -v           display version of version"
  echo "                       (yes, 'version version' also works!)"
  exit
fi

# Display recognized program count
if [ $1 == -c ]
then
  count=$(list_tools | wc -l)
  echo "I know how to find the versions of $count programs!"
  exit
fi

# Display version of version
if [ $1 == -v ]
then
  echo "version $ver"
  exit
fi

# Display all the tools we know
if [ $1 == -l ]
then
  list_tools
  exit
fi

# sanitize and find in the list
tool=$(echo "tools_$1" | sed -Ee 's/-/_/g')
version_arg=${!tool}

# do we know about this program?
if [ -z $version_arg ]
then
  # maybe a package manager knows it
  echo "version does not know about '$1'"

  # if we're on mac, we can skip these
  if [[ `uname` != 'Darwin' ]]; then
    try_pacman $1
    try_apt $1
    try_dnf $1
    try_snap $1
    try_flatpak $1
  else
    try_brew $1
  fi

  try_npm $1
  try_pip $1

  # should only get here if neither pacman or apt are installed
  echo "version was unable to find any info on '$1'"
  exit
fi

# display the correct command for the user
echo "Command: $1 $version_arg"

# does the user have this program installed?
if ! command -v $1 &> /dev/null
then
  echo "But '$1' does not seem to be installed"
  exit 3
fi

# success. make the call to display the version.
$1 $version_arg
